/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.schematic.api.resources.credits.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.schematic.api.core.ObjectMappers;
import com.schematic.api.resources.credits.types.ListCreditBundlesRequestStatus;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ListCreditBundlesRequest.Builder.class)
public final class ListCreditBundlesRequest {
    private final Optional<String> ids;

    private final Optional<String> creditId;

    private final Optional<ListCreditBundlesRequestStatus> status;

    private final Optional<String> bundleType;

    private final Optional<Integer> limit;

    private final Optional<Integer> offset;

    private final Map<String, Object> additionalProperties;

    private ListCreditBundlesRequest(
            Optional<String> ids,
            Optional<String> creditId,
            Optional<ListCreditBundlesRequestStatus> status,
            Optional<String> bundleType,
            Optional<Integer> limit,
            Optional<Integer> offset,
            Map<String, Object> additionalProperties) {
        this.ids = ids;
        this.creditId = creditId;
        this.status = status;
        this.bundleType = bundleType;
        this.limit = limit;
        this.offset = offset;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("ids")
    public Optional<String> getIds() {
        return ids;
    }

    @JsonProperty("credit_id")
    public Optional<String> getCreditId() {
        return creditId;
    }

    @JsonProperty("status")
    public Optional<ListCreditBundlesRequestStatus> getStatus() {
        return status;
    }

    @JsonProperty("bundle_type")
    public Optional<String> getBundleType() {
        return bundleType;
    }

    /**
     * @return Page limit (default 100)
     */
    @JsonProperty("limit")
    public Optional<Integer> getLimit() {
        return limit;
    }

    /**
     * @return Page offset (default 0)
     */
    @JsonProperty("offset")
    public Optional<Integer> getOffset() {
        return offset;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ListCreditBundlesRequest && equalTo((ListCreditBundlesRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ListCreditBundlesRequest other) {
        return ids.equals(other.ids)
                && creditId.equals(other.creditId)
                && status.equals(other.status)
                && bundleType.equals(other.bundleType)
                && limit.equals(other.limit)
                && offset.equals(other.offset);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.ids, this.creditId, this.status, this.bundleType, this.limit, this.offset);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> ids = Optional.empty();

        private Optional<String> creditId = Optional.empty();

        private Optional<ListCreditBundlesRequestStatus> status = Optional.empty();

        private Optional<String> bundleType = Optional.empty();

        private Optional<Integer> limit = Optional.empty();

        private Optional<Integer> offset = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ListCreditBundlesRequest other) {
            ids(other.getIds());
            creditId(other.getCreditId());
            status(other.getStatus());
            bundleType(other.getBundleType());
            limit(other.getLimit());
            offset(other.getOffset());
            return this;
        }

        @JsonSetter(value = "ids", nulls = Nulls.SKIP)
        public Builder ids(Optional<String> ids) {
            this.ids = ids;
            return this;
        }

        public Builder ids(String ids) {
            this.ids = Optional.ofNullable(ids);
            return this;
        }

        @JsonSetter(value = "credit_id", nulls = Nulls.SKIP)
        public Builder creditId(Optional<String> creditId) {
            this.creditId = creditId;
            return this;
        }

        public Builder creditId(String creditId) {
            this.creditId = Optional.ofNullable(creditId);
            return this;
        }

        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public Builder status(Optional<ListCreditBundlesRequestStatus> status) {
            this.status = status;
            return this;
        }

        public Builder status(ListCreditBundlesRequestStatus status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        @JsonSetter(value = "bundle_type", nulls = Nulls.SKIP)
        public Builder bundleType(Optional<String> bundleType) {
            this.bundleType = bundleType;
            return this;
        }

        public Builder bundleType(String bundleType) {
            this.bundleType = Optional.ofNullable(bundleType);
            return this;
        }

        @JsonSetter(value = "limit", nulls = Nulls.SKIP)
        public Builder limit(Optional<Integer> limit) {
            this.limit = limit;
            return this;
        }

        public Builder limit(Integer limit) {
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        @JsonSetter(value = "offset", nulls = Nulls.SKIP)
        public Builder offset(Optional<Integer> offset) {
            this.offset = offset;
            return this;
        }

        public Builder offset(Integer offset) {
            this.offset = Optional.ofNullable(offset);
            return this;
        }

        public ListCreditBundlesRequest build() {
            return new ListCreditBundlesRequest(ids, creditId, status, bundleType, limit, offset, additionalProperties);
        }
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.schematic.api.resources.accesstokens.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.schematic.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = IssueTemporaryAccessTokenRequestBody.Builder.class)
public final class IssueTemporaryAccessTokenRequestBody {
    private final Map<String, String> lookup;

    private final Map<String, Object> additionalProperties;

    private IssueTemporaryAccessTokenRequestBody(Map<String, String> lookup, Map<String, Object> additionalProperties) {
        this.lookup = lookup;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("lookup")
    public Map<String, String> getLookup() {
        return lookup;
    }

    @JsonProperty("resource_type")
    public String getResourceType() {
        return "company";
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof IssueTemporaryAccessTokenRequestBody
                && equalTo((IssueTemporaryAccessTokenRequestBody) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(IssueTemporaryAccessTokenRequestBody other) {
        return lookup.equals(other.lookup);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.lookup);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Map<String, String> lookup = new LinkedHashMap<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(IssueTemporaryAccessTokenRequestBody other) {
            lookup(other.getLookup());
            return this;
        }

        @JsonSetter(value = "lookup", nulls = Nulls.SKIP)
        public Builder lookup(Map<String, String> lookup) {
            this.lookup.clear();
            this.lookup.putAll(lookup);
            return this;
        }

        public Builder putAllLookup(Map<String, String> lookup) {
            this.lookup.putAll(lookup);
            return this;
        }

        public Builder lookup(String key, String value) {
            this.lookup.put(key, value);
            return this;
        }

        public IssueTemporaryAccessTokenRequestBody build() {
            return new IssueTemporaryAccessTokenRequestBody(lookup, additionalProperties);
        }
    }
}

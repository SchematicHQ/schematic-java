/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.schematic.api.resources.features.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.schematic.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ListFeaturesParams.Builder.class)
public final class ListFeaturesParams {
    private final Optional<Boolean> booleanRequireEvent;

    private final Optional<List<String>> featureType;

    private final Optional<List<String>> ids;

    private final Optional<Integer> limit;

    private final Optional<Integer> offset;

    private final Optional<String> q;

    private final Optional<String> withoutCompanyOverrideFor;

    private final Optional<String> withoutPlanEntitlementFor;

    private final Map<String, Object> additionalProperties;

    private ListFeaturesParams(
            Optional<Boolean> booleanRequireEvent,
            Optional<List<String>> featureType,
            Optional<List<String>> ids,
            Optional<Integer> limit,
            Optional<Integer> offset,
            Optional<String> q,
            Optional<String> withoutCompanyOverrideFor,
            Optional<String> withoutPlanEntitlementFor,
            Map<String, Object> additionalProperties) {
        this.booleanRequireEvent = booleanRequireEvent;
        this.featureType = featureType;
        this.ids = ids;
        this.limit = limit;
        this.offset = offset;
        this.q = q;
        this.withoutCompanyOverrideFor = withoutCompanyOverrideFor;
        this.withoutPlanEntitlementFor = withoutPlanEntitlementFor;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Only return boolean features if there is an associated event. Automatically includes boolean in the feature types filter.
     */
    @JsonProperty("boolean_require_event")
    public Optional<Boolean> getBooleanRequireEvent() {
        return booleanRequireEvent;
    }

    /**
     * @return Filter by one or more feature types (boolean, event, trait)
     */
    @JsonProperty("feature_type")
    public Optional<List<String>> getFeatureType() {
        return featureType;
    }

    @JsonProperty("ids")
    public Optional<List<String>> getIds() {
        return ids;
    }

    /**
     * @return Page limit (default 100)
     */
    @JsonProperty("limit")
    public Optional<Integer> getLimit() {
        return limit;
    }

    /**
     * @return Page offset (default 0)
     */
    @JsonProperty("offset")
    public Optional<Integer> getOffset() {
        return offset;
    }

    /**
     * @return Search by feature name or ID
     */
    @JsonProperty("q")
    public Optional<String> getQ() {
        return q;
    }

    /**
     * @return Filter out features that already have a company override for the specified company ID
     */
    @JsonProperty("without_company_override_for")
    public Optional<String> getWithoutCompanyOverrideFor() {
        return withoutCompanyOverrideFor;
    }

    /**
     * @return Filter out features that already have a plan entitlement for the specified plan ID
     */
    @JsonProperty("without_plan_entitlement_for")
    public Optional<String> getWithoutPlanEntitlementFor() {
        return withoutPlanEntitlementFor;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ListFeaturesParams && equalTo((ListFeaturesParams) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ListFeaturesParams other) {
        return booleanRequireEvent.equals(other.booleanRequireEvent)
                && featureType.equals(other.featureType)
                && ids.equals(other.ids)
                && limit.equals(other.limit)
                && offset.equals(other.offset)
                && q.equals(other.q)
                && withoutCompanyOverrideFor.equals(other.withoutCompanyOverrideFor)
                && withoutPlanEntitlementFor.equals(other.withoutPlanEntitlementFor);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.booleanRequireEvent,
                this.featureType,
                this.ids,
                this.limit,
                this.offset,
                this.q,
                this.withoutCompanyOverrideFor,
                this.withoutPlanEntitlementFor);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> booleanRequireEvent = Optional.empty();

        private Optional<List<String>> featureType = Optional.empty();

        private Optional<List<String>> ids = Optional.empty();

        private Optional<Integer> limit = Optional.empty();

        private Optional<Integer> offset = Optional.empty();

        private Optional<String> q = Optional.empty();

        private Optional<String> withoutCompanyOverrideFor = Optional.empty();

        private Optional<String> withoutPlanEntitlementFor = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ListFeaturesParams other) {
            booleanRequireEvent(other.getBooleanRequireEvent());
            featureType(other.getFeatureType());
            ids(other.getIds());
            limit(other.getLimit());
            offset(other.getOffset());
            q(other.getQ());
            withoutCompanyOverrideFor(other.getWithoutCompanyOverrideFor());
            withoutPlanEntitlementFor(other.getWithoutPlanEntitlementFor());
            return this;
        }

        /**
         * <p>Only return boolean features if there is an associated event. Automatically includes boolean in the feature types filter.</p>
         */
        @JsonSetter(value = "boolean_require_event", nulls = Nulls.SKIP)
        public Builder booleanRequireEvent(Optional<Boolean> booleanRequireEvent) {
            this.booleanRequireEvent = booleanRequireEvent;
            return this;
        }

        public Builder booleanRequireEvent(Boolean booleanRequireEvent) {
            this.booleanRequireEvent = Optional.ofNullable(booleanRequireEvent);
            return this;
        }

        /**
         * <p>Filter by one or more feature types (boolean, event, trait)</p>
         */
        @JsonSetter(value = "feature_type", nulls = Nulls.SKIP)
        public Builder featureType(Optional<List<String>> featureType) {
            this.featureType = featureType;
            return this;
        }

        public Builder featureType(List<String> featureType) {
            this.featureType = Optional.ofNullable(featureType);
            return this;
        }

        @JsonSetter(value = "ids", nulls = Nulls.SKIP)
        public Builder ids(Optional<List<String>> ids) {
            this.ids = ids;
            return this;
        }

        public Builder ids(List<String> ids) {
            this.ids = Optional.ofNullable(ids);
            return this;
        }

        /**
         * <p>Page limit (default 100)</p>
         */
        @JsonSetter(value = "limit", nulls = Nulls.SKIP)
        public Builder limit(Optional<Integer> limit) {
            this.limit = limit;
            return this;
        }

        public Builder limit(Integer limit) {
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        /**
         * <p>Page offset (default 0)</p>
         */
        @JsonSetter(value = "offset", nulls = Nulls.SKIP)
        public Builder offset(Optional<Integer> offset) {
            this.offset = offset;
            return this;
        }

        public Builder offset(Integer offset) {
            this.offset = Optional.ofNullable(offset);
            return this;
        }

        /**
         * <p>Search by feature name or ID</p>
         */
        @JsonSetter(value = "q", nulls = Nulls.SKIP)
        public Builder q(Optional<String> q) {
            this.q = q;
            return this;
        }

        public Builder q(String q) {
            this.q = Optional.ofNullable(q);
            return this;
        }

        /**
         * <p>Filter out features that already have a company override for the specified company ID</p>
         */
        @JsonSetter(value = "without_company_override_for", nulls = Nulls.SKIP)
        public Builder withoutCompanyOverrideFor(Optional<String> withoutCompanyOverrideFor) {
            this.withoutCompanyOverrideFor = withoutCompanyOverrideFor;
            return this;
        }

        public Builder withoutCompanyOverrideFor(String withoutCompanyOverrideFor) {
            this.withoutCompanyOverrideFor = Optional.ofNullable(withoutCompanyOverrideFor);
            return this;
        }

        /**
         * <p>Filter out features that already have a plan entitlement for the specified plan ID</p>
         */
        @JsonSetter(value = "without_plan_entitlement_for", nulls = Nulls.SKIP)
        public Builder withoutPlanEntitlementFor(Optional<String> withoutPlanEntitlementFor) {
            this.withoutPlanEntitlementFor = withoutPlanEntitlementFor;
            return this;
        }

        public Builder withoutPlanEntitlementFor(String withoutPlanEntitlementFor) {
            this.withoutPlanEntitlementFor = Optional.ofNullable(withoutPlanEntitlementFor);
            return this;
        }

        public ListFeaturesParams build() {
            return new ListFeaturesParams(
                    booleanRequireEvent,
                    featureType,
                    ids,
                    limit,
                    offset,
                    q,
                    withoutCompanyOverrideFor,
                    withoutPlanEntitlementFor,
                    additionalProperties);
        }
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.schematic.api.resources.accounts.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.schematic.api.core.ObjectMappers;
import com.schematic.api.resources.accounts.types.UpdateEnvironmentRequestBodyEnvironmentType;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = UpdateEnvironmentRequestBody.Builder.class)
public final class UpdateEnvironmentRequestBody {
    private final Optional<UpdateEnvironmentRequestBodyEnvironmentType> environmentType;

    private final Optional<String> name;

    private final Map<String, Object> additionalProperties;

    private UpdateEnvironmentRequestBody(
            Optional<UpdateEnvironmentRequestBodyEnvironmentType> environmentType,
            Optional<String> name,
            Map<String, Object> additionalProperties) {
        this.environmentType = environmentType;
        this.name = name;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("environment_type")
    public Optional<UpdateEnvironmentRequestBodyEnvironmentType> getEnvironmentType() {
        return environmentType;
    }

    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UpdateEnvironmentRequestBody && equalTo((UpdateEnvironmentRequestBody) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UpdateEnvironmentRequestBody other) {
        return environmentType.equals(other.environmentType) && name.equals(other.name);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.environmentType, this.name);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<UpdateEnvironmentRequestBodyEnvironmentType> environmentType = Optional.empty();

        private Optional<String> name = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(UpdateEnvironmentRequestBody other) {
            environmentType(other.getEnvironmentType());
            name(other.getName());
            return this;
        }

        @JsonSetter(value = "environment_type", nulls = Nulls.SKIP)
        public Builder environmentType(Optional<UpdateEnvironmentRequestBodyEnvironmentType> environmentType) {
            this.environmentType = environmentType;
            return this;
        }

        public Builder environmentType(UpdateEnvironmentRequestBodyEnvironmentType environmentType) {
            this.environmentType = Optional.ofNullable(environmentType);
            return this;
        }

        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        public UpdateEnvironmentRequestBody build() {
            return new UpdateEnvironmentRequestBody(environmentType, name, additionalProperties);
        }
    }
}

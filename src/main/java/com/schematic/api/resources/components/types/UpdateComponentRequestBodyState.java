/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.schematic.api.resources.components.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

public final class UpdateComponentRequestBodyState {
    public static final UpdateComponentRequestBodyState LIVE = new UpdateComponentRequestBodyState(Value.LIVE, "live");

    public static final UpdateComponentRequestBodyState DRAFT =
            new UpdateComponentRequestBodyState(Value.DRAFT, "draft");

    private final Value value;

    private final String string;

    UpdateComponentRequestBodyState(Value value, String string) {
        this.value = value;
        this.string = string;
    }

    public Value getEnumValue() {
        return value;
    }

    @java.lang.Override
    @JsonValue
    public String toString() {
        return this.string;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        return (this == other)
                || (other instanceof UpdateComponentRequestBodyState
                        && this.string.equals(((UpdateComponentRequestBodyState) other).string));
    }

    @java.lang.Override
    public int hashCode() {
        return this.string.hashCode();
    }

    public <T> T visit(Visitor<T> visitor) {
        switch (value) {
            case LIVE:
                return visitor.visitLive();
            case DRAFT:
                return visitor.visitDraft();
            case UNKNOWN:
            default:
                return visitor.visitUnknown(string);
        }
    }

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    public static UpdateComponentRequestBodyState valueOf(String value) {
        switch (value) {
            case "live":
                return LIVE;
            case "draft":
                return DRAFT;
            default:
                return new UpdateComponentRequestBodyState(Value.UNKNOWN, value);
        }
    }

    public enum Value {
        DRAFT,

        LIVE,

        UNKNOWN
    }

    public interface Visitor<T> {
        T visitDraft();

        T visitLive();

        T visitUnknown(String unknownType);
    }
}

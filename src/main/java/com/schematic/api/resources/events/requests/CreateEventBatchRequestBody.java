/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.schematic.api.resources.events.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.schematic.api.core.ObjectMappers;
import com.schematic.api.types.CreateEventRequestBody;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = CreateEventBatchRequestBody.Builder.class)
public final class CreateEventBatchRequestBody {
    private final List<CreateEventRequestBody> events;

    private final Map<String, Object> additionalProperties;

    private CreateEventBatchRequestBody(List<CreateEventRequestBody> events, Map<String, Object> additionalProperties) {
        this.events = events;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("events")
    public List<CreateEventRequestBody> getEvents() {
        return events;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CreateEventBatchRequestBody && equalTo((CreateEventBatchRequestBody) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CreateEventBatchRequestBody other) {
        return events.equals(other.events);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.events);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private List<CreateEventRequestBody> events = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CreateEventBatchRequestBody other) {
            events(other.getEvents());
            return this;
        }

        @JsonSetter(value = "events", nulls = Nulls.SKIP)
        public Builder events(List<CreateEventRequestBody> events) {
            this.events.clear();
            this.events.addAll(events);
            return this;
        }

        public Builder addEvents(CreateEventRequestBody events) {
            this.events.add(events);
            return this;
        }

        public Builder addAllEvents(List<CreateEventRequestBody> events) {
            this.events.addAll(events);
            return this;
        }

        public CreateEventBatchRequestBody build() {
            return new CreateEventBatchRequestBody(events, additionalProperties);
        }
    }
}

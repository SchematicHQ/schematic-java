/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.schematic.api.resources.events.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

public final class ListEventsRequestEventTypesItem {
    public static final ListEventsRequestEventTypesItem FLAG_CHECK =
            new ListEventsRequestEventTypesItem(Value.FLAG_CHECK, "flag_check");

    public static final ListEventsRequestEventTypesItem TRACK =
            new ListEventsRequestEventTypesItem(Value.TRACK, "track");

    public static final ListEventsRequestEventTypesItem IDENTIFY =
            new ListEventsRequestEventTypesItem(Value.IDENTIFY, "identify");

    private final Value value;

    private final String string;

    ListEventsRequestEventTypesItem(Value value, String string) {
        this.value = value;
        this.string = string;
    }

    public Value getEnumValue() {
        return value;
    }

    @java.lang.Override
    @JsonValue
    public String toString() {
        return this.string;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        return (this == other)
                || (other instanceof ListEventsRequestEventTypesItem
                        && this.string.equals(((ListEventsRequestEventTypesItem) other).string));
    }

    @java.lang.Override
    public int hashCode() {
        return this.string.hashCode();
    }

    public <T> T visit(Visitor<T> visitor) {
        switch (value) {
            case FLAG_CHECK:
                return visitor.visitFlagCheck();
            case TRACK:
                return visitor.visitTrack();
            case IDENTIFY:
                return visitor.visitIdentify();
            case UNKNOWN:
            default:
                return visitor.visitUnknown(string);
        }
    }

    @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
    public static ListEventsRequestEventTypesItem valueOf(String value) {
        switch (value) {
            case "flag_check":
                return FLAG_CHECK;
            case "track":
                return TRACK;
            case "identify":
                return IDENTIFY;
            default:
                return new ListEventsRequestEventTypesItem(Value.UNKNOWN, value);
        }
    }

    public enum Value {
        IDENTIFY,

        TRACK,

        FLAG_CHECK,

        UNKNOWN
    }

    public interface Visitor<T> {
        T visitIdentify();

        T visitTrack();

        T visitFlagCheck();

        T visitUnknown(String unknownType);
    }
}

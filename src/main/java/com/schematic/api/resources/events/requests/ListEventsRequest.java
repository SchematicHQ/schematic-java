/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.schematic.api.resources.events.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.schematic.api.core.ObjectMappers;
import com.schematic.api.resources.events.types.ListEventsRequestEventTypesItem;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ListEventsRequest.Builder.class)
public final class ListEventsRequest {
    private final Optional<String> companyId;

    private final Optional<String> eventSubtype;

    private final Optional<ListEventsRequestEventTypesItem> eventTypes;

    private final Optional<String> flagId;

    private final Optional<String> userId;

    private final Optional<Integer> limit;

    private final Optional<Integer> offset;

    private final Map<String, Object> additionalProperties;

    private ListEventsRequest(
            Optional<String> companyId,
            Optional<String> eventSubtype,
            Optional<ListEventsRequestEventTypesItem> eventTypes,
            Optional<String> flagId,
            Optional<String> userId,
            Optional<Integer> limit,
            Optional<Integer> offset,
            Map<String, Object> additionalProperties) {
        this.companyId = companyId;
        this.eventSubtype = eventSubtype;
        this.eventTypes = eventTypes;
        this.flagId = flagId;
        this.userId = userId;
        this.limit = limit;
        this.offset = offset;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("company_id")
    public Optional<String> getCompanyId() {
        return companyId;
    }

    @JsonProperty("event_subtype")
    public Optional<String> getEventSubtype() {
        return eventSubtype;
    }

    @JsonProperty("event_types")
    public Optional<ListEventsRequestEventTypesItem> getEventTypes() {
        return eventTypes;
    }

    @JsonProperty("flag_id")
    public Optional<String> getFlagId() {
        return flagId;
    }

    @JsonProperty("user_id")
    public Optional<String> getUserId() {
        return userId;
    }

    /**
     * @return Page limit (default 100)
     */
    @JsonProperty("limit")
    public Optional<Integer> getLimit() {
        return limit;
    }

    /**
     * @return Page offset (default 0)
     */
    @JsonProperty("offset")
    public Optional<Integer> getOffset() {
        return offset;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ListEventsRequest && equalTo((ListEventsRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ListEventsRequest other) {
        return companyId.equals(other.companyId)
                && eventSubtype.equals(other.eventSubtype)
                && eventTypes.equals(other.eventTypes)
                && flagId.equals(other.flagId)
                && userId.equals(other.userId)
                && limit.equals(other.limit)
                && offset.equals(other.offset);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.companyId, this.eventSubtype, this.eventTypes, this.flagId, this.userId, this.limit, this.offset);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> companyId = Optional.empty();

        private Optional<String> eventSubtype = Optional.empty();

        private Optional<ListEventsRequestEventTypesItem> eventTypes = Optional.empty();

        private Optional<String> flagId = Optional.empty();

        private Optional<String> userId = Optional.empty();

        private Optional<Integer> limit = Optional.empty();

        private Optional<Integer> offset = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ListEventsRequest other) {
            companyId(other.getCompanyId());
            eventSubtype(other.getEventSubtype());
            eventTypes(other.getEventTypes());
            flagId(other.getFlagId());
            userId(other.getUserId());
            limit(other.getLimit());
            offset(other.getOffset());
            return this;
        }

        @JsonSetter(value = "company_id", nulls = Nulls.SKIP)
        public Builder companyId(Optional<String> companyId) {
            this.companyId = companyId;
            return this;
        }

        public Builder companyId(String companyId) {
            this.companyId = Optional.ofNullable(companyId);
            return this;
        }

        @JsonSetter(value = "event_subtype", nulls = Nulls.SKIP)
        public Builder eventSubtype(Optional<String> eventSubtype) {
            this.eventSubtype = eventSubtype;
            return this;
        }

        public Builder eventSubtype(String eventSubtype) {
            this.eventSubtype = Optional.ofNullable(eventSubtype);
            return this;
        }

        @JsonSetter(value = "event_types", nulls = Nulls.SKIP)
        public Builder eventTypes(Optional<ListEventsRequestEventTypesItem> eventTypes) {
            this.eventTypes = eventTypes;
            return this;
        }

        public Builder eventTypes(ListEventsRequestEventTypesItem eventTypes) {
            this.eventTypes = Optional.ofNullable(eventTypes);
            return this;
        }

        @JsonSetter(value = "flag_id", nulls = Nulls.SKIP)
        public Builder flagId(Optional<String> flagId) {
            this.flagId = flagId;
            return this;
        }

        public Builder flagId(String flagId) {
            this.flagId = Optional.ofNullable(flagId);
            return this;
        }

        @JsonSetter(value = "user_id", nulls = Nulls.SKIP)
        public Builder userId(Optional<String> userId) {
            this.userId = userId;
            return this;
        }

        public Builder userId(String userId) {
            this.userId = Optional.ofNullable(userId);
            return this;
        }

        @JsonSetter(value = "limit", nulls = Nulls.SKIP)
        public Builder limit(Optional<Integer> limit) {
            this.limit = limit;
            return this;
        }

        public Builder limit(Integer limit) {
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        @JsonSetter(value = "offset", nulls = Nulls.SKIP)
        public Builder offset(Optional<Integer> offset) {
            this.offset = offset;
            return this;
        }

        public Builder offset(Integer offset) {
            this.offset = Optional.ofNullable(offset);
            return this;
        }

        public ListEventsRequest build() {
            return new ListEventsRequest(
                    companyId, eventSubtype, eventTypes, flagId, userId, limit, offset, additionalProperties);
        }
    }
}

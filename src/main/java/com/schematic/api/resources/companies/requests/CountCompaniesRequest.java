/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.schematic.api.resources.companies.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.schematic.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CountCompaniesRequest.Builder.class)
public final class CountCompaniesRequest {
    private final Optional<String> ids;

    private final Optional<String> planId;

    private final Optional<String> q;

    private final Optional<String> withoutFeatureOverrideFor;

    private final Optional<Boolean> withoutPlan;

    private final Optional<Boolean> withSubscription;

    private final Optional<Integer> limit;

    private final Optional<Integer> offset;

    private final Map<String, Object> additionalProperties;

    private CountCompaniesRequest(
            Optional<String> ids,
            Optional<String> planId,
            Optional<String> q,
            Optional<String> withoutFeatureOverrideFor,
            Optional<Boolean> withoutPlan,
            Optional<Boolean> withSubscription,
            Optional<Integer> limit,
            Optional<Integer> offset,
            Map<String, Object> additionalProperties) {
        this.ids = ids;
        this.planId = planId;
        this.q = q;
        this.withoutFeatureOverrideFor = withoutFeatureOverrideFor;
        this.withoutPlan = withoutPlan;
        this.withSubscription = withSubscription;
        this.limit = limit;
        this.offset = offset;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Filter companies by multiple company IDs (starts with comp_)
     */
    @JsonProperty("ids")
    public Optional<String> getIds() {
        return ids;
    }

    /**
     * @return Filter companies by plan ID (starts with plan_)
     */
    @JsonProperty("plan_id")
    public Optional<String> getPlanId() {
        return planId;
    }

    /**
     * @return Search for companies by name, keys or string traits
     */
    @JsonProperty("q")
    public Optional<String> getQ() {
        return q;
    }

    /**
     * @return Filter out companies that already have a company override for the specified feature ID
     */
    @JsonProperty("without_feature_override_for")
    public Optional<String> getWithoutFeatureOverrideFor() {
        return withoutFeatureOverrideFor;
    }

    /**
     * @return Filter out companies that have a plan
     */
    @JsonProperty("without_plan")
    public Optional<Boolean> getWithoutPlan() {
        return withoutPlan;
    }

    /**
     * @return Filter companies that have a subscription
     */
    @JsonProperty("with_subscription")
    public Optional<Boolean> getWithSubscription() {
        return withSubscription;
    }

    /**
     * @return Page limit (default 100)
     */
    @JsonProperty("limit")
    public Optional<Integer> getLimit() {
        return limit;
    }

    /**
     * @return Page offset (default 0)
     */
    @JsonProperty("offset")
    public Optional<Integer> getOffset() {
        return offset;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CountCompaniesRequest && equalTo((CountCompaniesRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CountCompaniesRequest other) {
        return ids.equals(other.ids)
                && planId.equals(other.planId)
                && q.equals(other.q)
                && withoutFeatureOverrideFor.equals(other.withoutFeatureOverrideFor)
                && withoutPlan.equals(other.withoutPlan)
                && withSubscription.equals(other.withSubscription)
                && limit.equals(other.limit)
                && offset.equals(other.offset);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.ids,
                this.planId,
                this.q,
                this.withoutFeatureOverrideFor,
                this.withoutPlan,
                this.withSubscription,
                this.limit,
                this.offset);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> ids = Optional.empty();

        private Optional<String> planId = Optional.empty();

        private Optional<String> q = Optional.empty();

        private Optional<String> withoutFeatureOverrideFor = Optional.empty();

        private Optional<Boolean> withoutPlan = Optional.empty();

        private Optional<Boolean> withSubscription = Optional.empty();

        private Optional<Integer> limit = Optional.empty();

        private Optional<Integer> offset = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(CountCompaniesRequest other) {
            ids(other.getIds());
            planId(other.getPlanId());
            q(other.getQ());
            withoutFeatureOverrideFor(other.getWithoutFeatureOverrideFor());
            withoutPlan(other.getWithoutPlan());
            withSubscription(other.getWithSubscription());
            limit(other.getLimit());
            offset(other.getOffset());
            return this;
        }

        @JsonSetter(value = "ids", nulls = Nulls.SKIP)
        public Builder ids(Optional<String> ids) {
            this.ids = ids;
            return this;
        }

        public Builder ids(String ids) {
            this.ids = Optional.ofNullable(ids);
            return this;
        }

        @JsonSetter(value = "plan_id", nulls = Nulls.SKIP)
        public Builder planId(Optional<String> planId) {
            this.planId = planId;
            return this;
        }

        public Builder planId(String planId) {
            this.planId = Optional.ofNullable(planId);
            return this;
        }

        @JsonSetter(value = "q", nulls = Nulls.SKIP)
        public Builder q(Optional<String> q) {
            this.q = q;
            return this;
        }

        public Builder q(String q) {
            this.q = Optional.ofNullable(q);
            return this;
        }

        @JsonSetter(value = "without_feature_override_for", nulls = Nulls.SKIP)
        public Builder withoutFeatureOverrideFor(Optional<String> withoutFeatureOverrideFor) {
            this.withoutFeatureOverrideFor = withoutFeatureOverrideFor;
            return this;
        }

        public Builder withoutFeatureOverrideFor(String withoutFeatureOverrideFor) {
            this.withoutFeatureOverrideFor = Optional.ofNullable(withoutFeatureOverrideFor);
            return this;
        }

        @JsonSetter(value = "without_plan", nulls = Nulls.SKIP)
        public Builder withoutPlan(Optional<Boolean> withoutPlan) {
            this.withoutPlan = withoutPlan;
            return this;
        }

        public Builder withoutPlan(Boolean withoutPlan) {
            this.withoutPlan = Optional.ofNullable(withoutPlan);
            return this;
        }

        @JsonSetter(value = "with_subscription", nulls = Nulls.SKIP)
        public Builder withSubscription(Optional<Boolean> withSubscription) {
            this.withSubscription = withSubscription;
            return this;
        }

        public Builder withSubscription(Boolean withSubscription) {
            this.withSubscription = Optional.ofNullable(withSubscription);
            return this;
        }

        @JsonSetter(value = "limit", nulls = Nulls.SKIP)
        public Builder limit(Optional<Integer> limit) {
            this.limit = limit;
            return this;
        }

        public Builder limit(Integer limit) {
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        @JsonSetter(value = "offset", nulls = Nulls.SKIP)
        public Builder offset(Optional<Integer> offset) {
            this.offset = offset;
            return this;
        }

        public Builder offset(Integer offset) {
            this.offset = Optional.ofNullable(offset);
            return this;
        }

        public CountCompaniesRequest build() {
            return new CountCompaniesRequest(
                    ids,
                    planId,
                    q,
                    withoutFeatureOverrideFor,
                    withoutPlan,
                    withSubscription,
                    limit,
                    offset,
                    additionalProperties);
        }
    }
}

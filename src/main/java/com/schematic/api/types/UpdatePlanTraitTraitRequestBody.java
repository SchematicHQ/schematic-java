/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.schematic.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.schematic.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = UpdatePlanTraitTraitRequestBody.Builder.class)
public final class UpdatePlanTraitTraitRequestBody {
    private final String traitId;

    private final String traitValue;

    private final Map<String, Object> additionalProperties;

    private UpdatePlanTraitTraitRequestBody(
            String traitId, String traitValue, Map<String, Object> additionalProperties) {
        this.traitId = traitId;
        this.traitValue = traitValue;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("trait_id")
    public String getTraitId() {
        return traitId;
    }

    @JsonProperty("trait_value")
    public String getTraitValue() {
        return traitValue;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UpdatePlanTraitTraitRequestBody && equalTo((UpdatePlanTraitTraitRequestBody) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UpdatePlanTraitTraitRequestBody other) {
        return traitId.equals(other.traitId) && traitValue.equals(other.traitValue);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.traitId, this.traitValue);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static TraitIdStage builder() {
        return new Builder();
    }

    public interface TraitIdStage {
        TraitValueStage traitId(@NotNull String traitId);

        Builder from(UpdatePlanTraitTraitRequestBody other);
    }

    public interface TraitValueStage {
        _FinalStage traitValue(@NotNull String traitValue);
    }

    public interface _FinalStage {
        UpdatePlanTraitTraitRequestBody build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements TraitIdStage, TraitValueStage, _FinalStage {
        private String traitId;

        private String traitValue;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(UpdatePlanTraitTraitRequestBody other) {
            traitId(other.getTraitId());
            traitValue(other.getTraitValue());
            return this;
        }

        @java.lang.Override
        @JsonSetter("trait_id")
        public TraitValueStage traitId(@NotNull String traitId) {
            this.traitId = Objects.requireNonNull(traitId, "traitId must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("trait_value")
        public _FinalStage traitValue(@NotNull String traitValue) {
            this.traitValue = Objects.requireNonNull(traitValue, "traitValue must not be null");
            return this;
        }

        @java.lang.Override
        public UpdatePlanTraitTraitRequestBody build() {
            return new UpdatePlanTraitTraitRequestBody(traitId, traitValue, additionalProperties);
        }
    }
}

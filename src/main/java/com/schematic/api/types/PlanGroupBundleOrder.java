/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.schematic.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.schematic.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PlanGroupBundleOrder.Builder.class)
public final class PlanGroupBundleOrder {
    private final String bundleId;

    private final Map<String, Object> additionalProperties;

    private PlanGroupBundleOrder(String bundleId, Map<String, Object> additionalProperties) {
        this.bundleId = bundleId;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("bundleId")
    public String getBundleId() {
        return bundleId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PlanGroupBundleOrder && equalTo((PlanGroupBundleOrder) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PlanGroupBundleOrder other) {
        return bundleId.equals(other.bundleId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.bundleId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static BundleIdStage builder() {
        return new Builder();
    }

    public interface BundleIdStage {
        _FinalStage bundleId(@NotNull String bundleId);

        Builder from(PlanGroupBundleOrder other);
    }

    public interface _FinalStage {
        PlanGroupBundleOrder build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements BundleIdStage, _FinalStage {
        private String bundleId;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(PlanGroupBundleOrder other) {
            bundleId(other.getBundleId());
            return this;
        }

        @java.lang.Override
        @JsonSetter("bundleId")
        public _FinalStage bundleId(@NotNull String bundleId) {
            this.bundleId = Objects.requireNonNull(bundleId, "bundleId must not be null");
            return this;
        }

        @java.lang.Override
        public PlanGroupBundleOrder build() {
            return new PlanGroupBundleOrder(bundleId, additionalProperties);
        }
    }
}

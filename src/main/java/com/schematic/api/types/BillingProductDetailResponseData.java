/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.schematic.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.schematic.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BillingProductDetailResponseData.Builder.class)
public final class BillingProductDetailResponseData {
    private final String accountId;

    private final OffsetDateTime createdAt;

    private final String currency;

    private final String environmentId;

    private final String externalId;

    private final String name;

    private final double price;

    private final List<BillingPriceResponseData> prices;

    private final String productId;

    private final double quantity;

    private final OffsetDateTime updatedAt;

    private final Map<String, Object> additionalProperties;

    private BillingProductDetailResponseData(
            String accountId,
            OffsetDateTime createdAt,
            String currency,
            String environmentId,
            String externalId,
            String name,
            double price,
            List<BillingPriceResponseData> prices,
            String productId,
            double quantity,
            OffsetDateTime updatedAt,
            Map<String, Object> additionalProperties) {
        this.accountId = accountId;
        this.createdAt = createdAt;
        this.currency = currency;
        this.environmentId = environmentId;
        this.externalId = externalId;
        this.name = name;
        this.price = price;
        this.prices = prices;
        this.productId = productId;
        this.quantity = quantity;
        this.updatedAt = updatedAt;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("account_id")
    public String getAccountId() {
        return accountId;
    }

    @JsonProperty("created_at")
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    @JsonProperty("currency")
    public String getCurrency() {
        return currency;
    }

    @JsonProperty("environment_id")
    public String getEnvironmentId() {
        return environmentId;
    }

    @JsonProperty("external_id")
    public String getExternalId() {
        return externalId;
    }

    @JsonProperty("name")
    public String getName() {
        return name;
    }

    @JsonProperty("price")
    public double getPrice() {
        return price;
    }

    @JsonProperty("prices")
    public List<BillingPriceResponseData> getPrices() {
        return prices;
    }

    @JsonProperty("product_id")
    public String getProductId() {
        return productId;
    }

    @JsonProperty("quantity")
    public double getQuantity() {
        return quantity;
    }

    @JsonProperty("updated_at")
    public OffsetDateTime getUpdatedAt() {
        return updatedAt;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BillingProductDetailResponseData && equalTo((BillingProductDetailResponseData) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BillingProductDetailResponseData other) {
        return accountId.equals(other.accountId)
                && createdAt.equals(other.createdAt)
                && currency.equals(other.currency)
                && environmentId.equals(other.environmentId)
                && externalId.equals(other.externalId)
                && name.equals(other.name)
                && price == other.price
                && prices.equals(other.prices)
                && productId.equals(other.productId)
                && quantity == other.quantity
                && updatedAt.equals(other.updatedAt);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.accountId,
                this.createdAt,
                this.currency,
                this.environmentId,
                this.externalId,
                this.name,
                this.price,
                this.prices,
                this.productId,
                this.quantity,
                this.updatedAt);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static AccountIdStage builder() {
        return new Builder();
    }

    public interface AccountIdStage {
        CreatedAtStage accountId(String accountId);

        Builder from(BillingProductDetailResponseData other);
    }

    public interface CreatedAtStage {
        CurrencyStage createdAt(OffsetDateTime createdAt);
    }

    public interface CurrencyStage {
        EnvironmentIdStage currency(String currency);
    }

    public interface EnvironmentIdStage {
        ExternalIdStage environmentId(String environmentId);
    }

    public interface ExternalIdStage {
        NameStage externalId(String externalId);
    }

    public interface NameStage {
        PriceStage name(String name);
    }

    public interface PriceStage {
        ProductIdStage price(double price);
    }

    public interface ProductIdStage {
        QuantityStage productId(String productId);
    }

    public interface QuantityStage {
        UpdatedAtStage quantity(double quantity);
    }

    public interface UpdatedAtStage {
        _FinalStage updatedAt(OffsetDateTime updatedAt);
    }

    public interface _FinalStage {
        BillingProductDetailResponseData build();

        _FinalStage prices(List<BillingPriceResponseData> prices);

        _FinalStage addPrices(BillingPriceResponseData prices);

        _FinalStage addAllPrices(List<BillingPriceResponseData> prices);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements AccountIdStage,
                    CreatedAtStage,
                    CurrencyStage,
                    EnvironmentIdStage,
                    ExternalIdStage,
                    NameStage,
                    PriceStage,
                    ProductIdStage,
                    QuantityStage,
                    UpdatedAtStage,
                    _FinalStage {
        private String accountId;

        private OffsetDateTime createdAt;

        private String currency;

        private String environmentId;

        private String externalId;

        private String name;

        private double price;

        private String productId;

        private double quantity;

        private OffsetDateTime updatedAt;

        private List<BillingPriceResponseData> prices = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(BillingProductDetailResponseData other) {
            accountId(other.getAccountId());
            createdAt(other.getCreatedAt());
            currency(other.getCurrency());
            environmentId(other.getEnvironmentId());
            externalId(other.getExternalId());
            name(other.getName());
            price(other.getPrice());
            prices(other.getPrices());
            productId(other.getProductId());
            quantity(other.getQuantity());
            updatedAt(other.getUpdatedAt());
            return this;
        }

        @java.lang.Override
        @JsonSetter("account_id")
        public CreatedAtStage accountId(String accountId) {
            this.accountId = accountId;
            return this;
        }

        @java.lang.Override
        @JsonSetter("created_at")
        public CurrencyStage createdAt(OffsetDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        @java.lang.Override
        @JsonSetter("currency")
        public EnvironmentIdStage currency(String currency) {
            this.currency = currency;
            return this;
        }

        @java.lang.Override
        @JsonSetter("environment_id")
        public ExternalIdStage environmentId(String environmentId) {
            this.environmentId = environmentId;
            return this;
        }

        @java.lang.Override
        @JsonSetter("external_id")
        public NameStage externalId(String externalId) {
            this.externalId = externalId;
            return this;
        }

        @java.lang.Override
        @JsonSetter("name")
        public PriceStage name(String name) {
            this.name = name;
            return this;
        }

        @java.lang.Override
        @JsonSetter("price")
        public ProductIdStage price(double price) {
            this.price = price;
            return this;
        }

        @java.lang.Override
        @JsonSetter("product_id")
        public QuantityStage productId(String productId) {
            this.productId = productId;
            return this;
        }

        @java.lang.Override
        @JsonSetter("quantity")
        public UpdatedAtStage quantity(double quantity) {
            this.quantity = quantity;
            return this;
        }

        @java.lang.Override
        @JsonSetter("updated_at")
        public _FinalStage updatedAt(OffsetDateTime updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllPrices(List<BillingPriceResponseData> prices) {
            this.prices.addAll(prices);
            return this;
        }

        @java.lang.Override
        public _FinalStage addPrices(BillingPriceResponseData prices) {
            this.prices.add(prices);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "prices", nulls = Nulls.SKIP)
        public _FinalStage prices(List<BillingPriceResponseData> prices) {
            this.prices.clear();
            this.prices.addAll(prices);
            return this;
        }

        @java.lang.Override
        public BillingProductDetailResponseData build() {
            return new BillingProductDetailResponseData(
                    accountId,
                    createdAt,
                    currency,
                    environmentId,
                    externalId,
                    name,
                    price,
                    prices,
                    productId,
                    quantity,
                    updatedAt,
                    additionalProperties);
        }
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.schematic.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.schematic.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ComponentCapabilities.Builder.class)
public final class ComponentCapabilities {
    private final boolean checkout;

    private final Map<String, Object> additionalProperties;

    private ComponentCapabilities(boolean checkout, Map<String, Object> additionalProperties) {
        this.checkout = checkout;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("checkout")
    public boolean getCheckout() {
        return checkout;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ComponentCapabilities && equalTo((ComponentCapabilities) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ComponentCapabilities other) {
        return checkout == other.checkout;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.checkout);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static CheckoutStage builder() {
        return new Builder();
    }

    public interface CheckoutStage {
        _FinalStage checkout(boolean checkout);

        Builder from(ComponentCapabilities other);
    }

    public interface _FinalStage {
        ComponentCapabilities build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements CheckoutStage, _FinalStage {
        private boolean checkout;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ComponentCapabilities other) {
            checkout(other.getCheckout());
            return this;
        }

        @java.lang.Override
        @JsonSetter("checkout")
        public _FinalStage checkout(boolean checkout) {
            this.checkout = checkout;
            return this;
        }

        @java.lang.Override
        public ComponentCapabilities build() {
            return new ComponentCapabilities(checkout, additionalProperties);
        }
    }
}

/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.schematic.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.schematic.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(builder = CompanySubscriptionResponseData.Builder.class)
public final class CompanySubscriptionResponseData {
    private final String currency;

    private final String customerExternalId;

    private final Optional<OffsetDateTime> expiredAt;

    private final String interval;

    private final Optional<InvoiceResponseData> latestInvoice;

    private final Optional<PaymentMethodResponseData> paymentMethod;

    private final List<BillingProductForSubscriptionResponseData> products;

    private final String status;

    private final String subscriptionExternalId;

    private final int totalPrice;

    private final Map<String, Object> additionalProperties;

    private CompanySubscriptionResponseData(
            String currency,
            String customerExternalId,
            Optional<OffsetDateTime> expiredAt,
            String interval,
            Optional<InvoiceResponseData> latestInvoice,
            Optional<PaymentMethodResponseData> paymentMethod,
            List<BillingProductForSubscriptionResponseData> products,
            String status,
            String subscriptionExternalId,
            int totalPrice,
            Map<String, Object> additionalProperties) {
        this.currency = currency;
        this.customerExternalId = customerExternalId;
        this.expiredAt = expiredAt;
        this.interval = interval;
        this.latestInvoice = latestInvoice;
        this.paymentMethod = paymentMethod;
        this.products = products;
        this.status = status;
        this.subscriptionExternalId = subscriptionExternalId;
        this.totalPrice = totalPrice;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("currency")
    public String getCurrency() {
        return currency;
    }

    @JsonProperty("customer_external_id")
    public String getCustomerExternalId() {
        return customerExternalId;
    }

    @JsonProperty("expired_at")
    public Optional<OffsetDateTime> getExpiredAt() {
        return expiredAt;
    }

    @JsonProperty("interval")
    public String getInterval() {
        return interval;
    }

    @JsonProperty("latest_invoice")
    public Optional<InvoiceResponseData> getLatestInvoice() {
        return latestInvoice;
    }

    @JsonProperty("payment_method")
    public Optional<PaymentMethodResponseData> getPaymentMethod() {
        return paymentMethod;
    }

    @JsonProperty("products")
    public List<BillingProductForSubscriptionResponseData> getProducts() {
        return products;
    }

    @JsonProperty("status")
    public String getStatus() {
        return status;
    }

    @JsonProperty("subscription_external_id")
    public String getSubscriptionExternalId() {
        return subscriptionExternalId;
    }

    @JsonProperty("total_price")
    public int getTotalPrice() {
        return totalPrice;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CompanySubscriptionResponseData && equalTo((CompanySubscriptionResponseData) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CompanySubscriptionResponseData other) {
        return currency.equals(other.currency)
                && customerExternalId.equals(other.customerExternalId)
                && expiredAt.equals(other.expiredAt)
                && interval.equals(other.interval)
                && latestInvoice.equals(other.latestInvoice)
                && paymentMethod.equals(other.paymentMethod)
                && products.equals(other.products)
                && status.equals(other.status)
                && subscriptionExternalId.equals(other.subscriptionExternalId)
                && totalPrice == other.totalPrice;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.currency,
                this.customerExternalId,
                this.expiredAt,
                this.interval,
                this.latestInvoice,
                this.paymentMethod,
                this.products,
                this.status,
                this.subscriptionExternalId,
                this.totalPrice);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static CurrencyStage builder() {
        return new Builder();
    }

    public interface CurrencyStage {
        CustomerExternalIdStage currency(String currency);

        Builder from(CompanySubscriptionResponseData other);
    }

    public interface CustomerExternalIdStage {
        IntervalStage customerExternalId(String customerExternalId);
    }

    public interface IntervalStage {
        StatusStage interval(String interval);
    }

    public interface StatusStage {
        SubscriptionExternalIdStage status(String status);
    }

    public interface SubscriptionExternalIdStage {
        TotalPriceStage subscriptionExternalId(String subscriptionExternalId);
    }

    public interface TotalPriceStage {
        _FinalStage totalPrice(int totalPrice);
    }

    public interface _FinalStage {
        CompanySubscriptionResponseData build();

        _FinalStage expiredAt(Optional<OffsetDateTime> expiredAt);

        _FinalStage expiredAt(OffsetDateTime expiredAt);

        _FinalStage latestInvoice(Optional<InvoiceResponseData> latestInvoice);

        _FinalStage latestInvoice(InvoiceResponseData latestInvoice);

        _FinalStage paymentMethod(Optional<PaymentMethodResponseData> paymentMethod);

        _FinalStage paymentMethod(PaymentMethodResponseData paymentMethod);

        _FinalStage products(List<BillingProductForSubscriptionResponseData> products);

        _FinalStage addProducts(BillingProductForSubscriptionResponseData products);

        _FinalStage addAllProducts(List<BillingProductForSubscriptionResponseData> products);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements CurrencyStage,
                    CustomerExternalIdStage,
                    IntervalStage,
                    StatusStage,
                    SubscriptionExternalIdStage,
                    TotalPriceStage,
                    _FinalStage {
        private String currency;

        private String customerExternalId;

        private String interval;

        private String status;

        private String subscriptionExternalId;

        private int totalPrice;

        private List<BillingProductForSubscriptionResponseData> products = new ArrayList<>();

        private Optional<PaymentMethodResponseData> paymentMethod = Optional.empty();

        private Optional<InvoiceResponseData> latestInvoice = Optional.empty();

        private Optional<OffsetDateTime> expiredAt = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CompanySubscriptionResponseData other) {
            currency(other.getCurrency());
            customerExternalId(other.getCustomerExternalId());
            expiredAt(other.getExpiredAt());
            interval(other.getInterval());
            latestInvoice(other.getLatestInvoice());
            paymentMethod(other.getPaymentMethod());
            products(other.getProducts());
            status(other.getStatus());
            subscriptionExternalId(other.getSubscriptionExternalId());
            totalPrice(other.getTotalPrice());
            return this;
        }

        @java.lang.Override
        @JsonSetter("currency")
        public CustomerExternalIdStage currency(String currency) {
            this.currency = currency;
            return this;
        }

        @java.lang.Override
        @JsonSetter("customer_external_id")
        public IntervalStage customerExternalId(String customerExternalId) {
            this.customerExternalId = customerExternalId;
            return this;
        }

        @java.lang.Override
        @JsonSetter("interval")
        public StatusStage interval(String interval) {
            this.interval = interval;
            return this;
        }

        @java.lang.Override
        @JsonSetter("status")
        public SubscriptionExternalIdStage status(String status) {
            this.status = status;
            return this;
        }

        @java.lang.Override
        @JsonSetter("subscription_external_id")
        public TotalPriceStage subscriptionExternalId(String subscriptionExternalId) {
            this.subscriptionExternalId = subscriptionExternalId;
            return this;
        }

        @java.lang.Override
        @JsonSetter("total_price")
        public _FinalStage totalPrice(int totalPrice) {
            this.totalPrice = totalPrice;
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllProducts(List<BillingProductForSubscriptionResponseData> products) {
            this.products.addAll(products);
            return this;
        }

        @java.lang.Override
        public _FinalStage addProducts(BillingProductForSubscriptionResponseData products) {
            this.products.add(products);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "products", nulls = Nulls.SKIP)
        public _FinalStage products(List<BillingProductForSubscriptionResponseData> products) {
            this.products.clear();
            this.products.addAll(products);
            return this;
        }

        @java.lang.Override
        public _FinalStage paymentMethod(PaymentMethodResponseData paymentMethod) {
            this.paymentMethod = Optional.of(paymentMethod);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "payment_method", nulls = Nulls.SKIP)
        public _FinalStage paymentMethod(Optional<PaymentMethodResponseData> paymentMethod) {
            this.paymentMethod = paymentMethod;
            return this;
        }

        @java.lang.Override
        public _FinalStage latestInvoice(InvoiceResponseData latestInvoice) {
            this.latestInvoice = Optional.of(latestInvoice);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "latest_invoice", nulls = Nulls.SKIP)
        public _FinalStage latestInvoice(Optional<InvoiceResponseData> latestInvoice) {
            this.latestInvoice = latestInvoice;
            return this;
        }

        @java.lang.Override
        public _FinalStage expiredAt(OffsetDateTime expiredAt) {
            this.expiredAt = Optional.of(expiredAt);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "expired_at", nulls = Nulls.SKIP)
        public _FinalStage expiredAt(Optional<OffsetDateTime> expiredAt) {
            this.expiredAt = expiredAt;
            return this;
        }

        @java.lang.Override
        public CompanySubscriptionResponseData build() {
            return new CompanySubscriptionResponseData(
                    currency,
                    customerExternalId,
                    expiredAt,
                    interval,
                    latestInvoice,
                    paymentMethod,
                    products,
                    status,
                    subscriptionExternalId,
                    totalPrice,
                    additionalProperties);
        }
    }
}

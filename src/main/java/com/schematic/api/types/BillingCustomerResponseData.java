/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.schematic.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.schematic.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = BillingCustomerResponseData.Builder.class)
public final class BillingCustomerResponseData {
    private final Optional<String> companyId;

    private final Optional<OffsetDateTime> deletedAt;

    private final String email;

    private final String externalId;

    private final boolean failedToImport;

    private final String id;

    private final String name;

    private final OffsetDateTime updatedAt;

    private final Map<String, Object> additionalProperties;

    private BillingCustomerResponseData(
            Optional<String> companyId,
            Optional<OffsetDateTime> deletedAt,
            String email,
            String externalId,
            boolean failedToImport,
            String id,
            String name,
            OffsetDateTime updatedAt,
            Map<String, Object> additionalProperties) {
        this.companyId = companyId;
        this.deletedAt = deletedAt;
        this.email = email;
        this.externalId = externalId;
        this.failedToImport = failedToImport;
        this.id = id;
        this.name = name;
        this.updatedAt = updatedAt;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("company_id")
    public Optional<String> getCompanyId() {
        return companyId;
    }

    @JsonProperty("deleted_at")
    public Optional<OffsetDateTime> getDeletedAt() {
        return deletedAt;
    }

    @JsonProperty("email")
    public String getEmail() {
        return email;
    }

    @JsonProperty("external_id")
    public String getExternalId() {
        return externalId;
    }

    @JsonProperty("failed_to_import")
    public boolean getFailedToImport() {
        return failedToImport;
    }

    @JsonProperty("id")
    public String getId() {
        return id;
    }

    @JsonProperty("name")
    public String getName() {
        return name;
    }

    @JsonProperty("updated_at")
    public OffsetDateTime getUpdatedAt() {
        return updatedAt;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof BillingCustomerResponseData && equalTo((BillingCustomerResponseData) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(BillingCustomerResponseData other) {
        return companyId.equals(other.companyId)
                && deletedAt.equals(other.deletedAt)
                && email.equals(other.email)
                && externalId.equals(other.externalId)
                && failedToImport == other.failedToImport
                && id.equals(other.id)
                && name.equals(other.name)
                && updatedAt.equals(other.updatedAt);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.companyId,
                this.deletedAt,
                this.email,
                this.externalId,
                this.failedToImport,
                this.id,
                this.name,
                this.updatedAt);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static EmailStage builder() {
        return new Builder();
    }

    public interface EmailStage {
        ExternalIdStage email(String email);

        Builder from(BillingCustomerResponseData other);
    }

    public interface ExternalIdStage {
        FailedToImportStage externalId(String externalId);
    }

    public interface FailedToImportStage {
        IdStage failedToImport(boolean failedToImport);
    }

    public interface IdStage {
        NameStage id(String id);
    }

    public interface NameStage {
        UpdatedAtStage name(String name);
    }

    public interface UpdatedAtStage {
        _FinalStage updatedAt(OffsetDateTime updatedAt);
    }

    public interface _FinalStage {
        BillingCustomerResponseData build();

        _FinalStage companyId(Optional<String> companyId);

        _FinalStage companyId(String companyId);

        _FinalStage deletedAt(Optional<OffsetDateTime> deletedAt);

        _FinalStage deletedAt(OffsetDateTime deletedAt);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements EmailStage,
                    ExternalIdStage,
                    FailedToImportStage,
                    IdStage,
                    NameStage,
                    UpdatedAtStage,
                    _FinalStage {
        private String email;

        private String externalId;

        private boolean failedToImport;

        private String id;

        private String name;

        private OffsetDateTime updatedAt;

        private Optional<OffsetDateTime> deletedAt = Optional.empty();

        private Optional<String> companyId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(BillingCustomerResponseData other) {
            companyId(other.getCompanyId());
            deletedAt(other.getDeletedAt());
            email(other.getEmail());
            externalId(other.getExternalId());
            failedToImport(other.getFailedToImport());
            id(other.getId());
            name(other.getName());
            updatedAt(other.getUpdatedAt());
            return this;
        }

        @java.lang.Override
        @JsonSetter("email")
        public ExternalIdStage email(String email) {
            this.email = email;
            return this;
        }

        @java.lang.Override
        @JsonSetter("external_id")
        public FailedToImportStage externalId(String externalId) {
            this.externalId = externalId;
            return this;
        }

        @java.lang.Override
        @JsonSetter("failed_to_import")
        public IdStage failedToImport(boolean failedToImport) {
            this.failedToImport = failedToImport;
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public NameStage id(String id) {
            this.id = id;
            return this;
        }

        @java.lang.Override
        @JsonSetter("name")
        public UpdatedAtStage name(String name) {
            this.name = name;
            return this;
        }

        @java.lang.Override
        @JsonSetter("updated_at")
        public _FinalStage updatedAt(OffsetDateTime updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        @java.lang.Override
        public _FinalStage deletedAt(OffsetDateTime deletedAt) {
            this.deletedAt = Optional.ofNullable(deletedAt);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "deleted_at", nulls = Nulls.SKIP)
        public _FinalStage deletedAt(Optional<OffsetDateTime> deletedAt) {
            this.deletedAt = deletedAt;
            return this;
        }

        @java.lang.Override
        public _FinalStage companyId(String companyId) {
            this.companyId = Optional.ofNullable(companyId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "company_id", nulls = Nulls.SKIP)
        public _FinalStage companyId(Optional<String> companyId) {
            this.companyId = companyId;
            return this;
        }

        @java.lang.Override
        public BillingCustomerResponseData build() {
            return new BillingCustomerResponseData(
                    companyId, deletedAt, email, externalId, failedToImport, id, name, updatedAt, additionalProperties);
        }
    }
}

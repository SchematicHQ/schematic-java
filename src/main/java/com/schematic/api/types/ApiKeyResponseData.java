/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.schematic.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.schematic.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ApiKeyResponseData.Builder.class)
public final class ApiKeyResponseData {
    private final OffsetDateTime createdAt;

    private final Optional<String> description;

    private final Optional<String> environmentId;

    private final String id;

    private final Optional<OffsetDateTime> lastUsedAt;

    private final String name;

    private final List<String> scopes;

    private final OffsetDateTime updatedAt;

    private final Map<String, Object> additionalProperties;

    private ApiKeyResponseData(
            OffsetDateTime createdAt,
            Optional<String> description,
            Optional<String> environmentId,
            String id,
            Optional<OffsetDateTime> lastUsedAt,
            String name,
            List<String> scopes,
            OffsetDateTime updatedAt,
            Map<String, Object> additionalProperties) {
        this.createdAt = createdAt;
        this.description = description;
        this.environmentId = environmentId;
        this.id = id;
        this.lastUsedAt = lastUsedAt;
        this.name = name;
        this.scopes = scopes;
        this.updatedAt = updatedAt;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("created_at")
    public OffsetDateTime getCreatedAt() {
        return createdAt;
    }

    @JsonProperty("description")
    public Optional<String> getDescription() {
        return description;
    }

    @JsonProperty("environment_id")
    public Optional<String> getEnvironmentId() {
        return environmentId;
    }

    @JsonProperty("id")
    public String getId() {
        return id;
    }

    @JsonProperty("last_used_at")
    public Optional<OffsetDateTime> getLastUsedAt() {
        return lastUsedAt;
    }

    @JsonProperty("name")
    public String getName() {
        return name;
    }

    @JsonProperty("scopes")
    public List<String> getScopes() {
        return scopes;
    }

    @JsonProperty("updated_at")
    public OffsetDateTime getUpdatedAt() {
        return updatedAt;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ApiKeyResponseData && equalTo((ApiKeyResponseData) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ApiKeyResponseData other) {
        return createdAt.equals(other.createdAt)
                && description.equals(other.description)
                && environmentId.equals(other.environmentId)
                && id.equals(other.id)
                && lastUsedAt.equals(other.lastUsedAt)
                && name.equals(other.name)
                && scopes.equals(other.scopes)
                && updatedAt.equals(other.updatedAt);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.createdAt,
                this.description,
                this.environmentId,
                this.id,
                this.lastUsedAt,
                this.name,
                this.scopes,
                this.updatedAt);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static CreatedAtStage builder() {
        return new Builder();
    }

    public interface CreatedAtStage {
        IdStage createdAt(OffsetDateTime createdAt);

        Builder from(ApiKeyResponseData other);
    }

    public interface IdStage {
        NameStage id(String id);
    }

    public interface NameStage {
        UpdatedAtStage name(String name);
    }

    public interface UpdatedAtStage {
        _FinalStage updatedAt(OffsetDateTime updatedAt);
    }

    public interface _FinalStage {
        ApiKeyResponseData build();

        _FinalStage description(Optional<String> description);

        _FinalStage description(String description);

        _FinalStage environmentId(Optional<String> environmentId);

        _FinalStage environmentId(String environmentId);

        _FinalStage lastUsedAt(Optional<OffsetDateTime> lastUsedAt);

        _FinalStage lastUsedAt(OffsetDateTime lastUsedAt);

        _FinalStage scopes(List<String> scopes);

        _FinalStage addScopes(String scopes);

        _FinalStage addAllScopes(List<String> scopes);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements CreatedAtStage, IdStage, NameStage, UpdatedAtStage, _FinalStage {
        private OffsetDateTime createdAt;

        private String id;

        private String name;

        private OffsetDateTime updatedAt;

        private List<String> scopes = new ArrayList<>();

        private Optional<OffsetDateTime> lastUsedAt = Optional.empty();

        private Optional<String> environmentId = Optional.empty();

        private Optional<String> description = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ApiKeyResponseData other) {
            createdAt(other.getCreatedAt());
            description(other.getDescription());
            environmentId(other.getEnvironmentId());
            id(other.getId());
            lastUsedAt(other.getLastUsedAt());
            name(other.getName());
            scopes(other.getScopes());
            updatedAt(other.getUpdatedAt());
            return this;
        }

        @java.lang.Override
        @JsonSetter("created_at")
        public IdStage createdAt(OffsetDateTime createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        @java.lang.Override
        @JsonSetter("id")
        public NameStage id(String id) {
            this.id = id;
            return this;
        }

        @java.lang.Override
        @JsonSetter("name")
        public UpdatedAtStage name(String name) {
            this.name = name;
            return this;
        }

        @java.lang.Override
        @JsonSetter("updated_at")
        public _FinalStage updatedAt(OffsetDateTime updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        @java.lang.Override
        public _FinalStage addAllScopes(List<String> scopes) {
            this.scopes.addAll(scopes);
            return this;
        }

        @java.lang.Override
        public _FinalStage addScopes(String scopes) {
            this.scopes.add(scopes);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "scopes", nulls = Nulls.SKIP)
        public _FinalStage scopes(List<String> scopes) {
            this.scopes.clear();
            this.scopes.addAll(scopes);
            return this;
        }

        @java.lang.Override
        public _FinalStage lastUsedAt(OffsetDateTime lastUsedAt) {
            this.lastUsedAt = Optional.ofNullable(lastUsedAt);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "last_used_at", nulls = Nulls.SKIP)
        public _FinalStage lastUsedAt(Optional<OffsetDateTime> lastUsedAt) {
            this.lastUsedAt = lastUsedAt;
            return this;
        }

        @java.lang.Override
        public _FinalStage environmentId(String environmentId) {
            this.environmentId = Optional.ofNullable(environmentId);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "environment_id", nulls = Nulls.SKIP)
        public _FinalStage environmentId(Optional<String> environmentId) {
            this.environmentId = environmentId;
            return this;
        }

        @java.lang.Override
        public _FinalStage description(String description) {
            this.description = Optional.ofNullable(description);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public _FinalStage description(Optional<String> description) {
            this.description = description;
            return this;
        }

        @java.lang.Override
        public ApiKeyResponseData build() {
            return new ApiKeyResponseData(
                    createdAt,
                    description,
                    environmentId,
                    id,
                    lastUsedAt,
                    name,
                    scopes,
                    updatedAt,
                    additionalProperties);
        }
    }
}
